<?php
//TODO: ALL APPLICANT_ID PARAMS OR MAGIC STRING OF ID MUST BE REPLACE WITH SESSION VARIABLE
class Client extends CI_Controller {

    public $temp_id = '91NR4POSTE';
    /**
     * client
     * homepage of client
     */
    public function index(){
        $data['title']    = 'Dashboard';
        $data['script']   = null;
        $this->load->view('layouts/backend/client/home', $data);
    }

    /**
     * client/search
     * Method to search jobs based on the users current qualifications
     */
    public function search(){
        
        $data['title']           = 'Jobs Listings';
        $data['location']        = 'client/findnow';
        // $data['script']          = null;
        $data['script']          = base_url('assets/build/js/client.js');
        // $client_id               = "91NR4POSTE";
        $client_id               = $this->temp_id;
        $qualification_id        = $this->client_model->get_qualification_id($client_id);
        $applicant_qualification = $this->client_model->get_applicant_qualifications($qualification_id->aq_id);
        $job_qualifications      = $this->job_model->get_company_job_listings_qualifications();
        $jobs                    = $this->organize_qualification_by_job_id($job_qualifications);
        $data['jobs']            = $this->filter_job($jobs, $applicant_qualification);

        $this->load->view('layouts/backend/client/home', $data);
    }

    public function view_job($job_id){
        $data['title']           = 'Jobs Details';
        $data['location']        = 'client/job_details';
        $data['script']          = base_url('assets/build/js/client.js');
        $data['applicant_id']    = $this->temp_id;
        // $client_id               = $this->temp_id;
        $data['job_detail']      = $this->job_model->view_details($job_id, true);

        $this->load->view('layouts/backend/client/home', $data);
    }


    public function apply(){

        $applicant_id = $this->input->post('applicantId');
        $job_id       = $this->input->post('jobId');

        $id           = $this->company_model->get_company_id($job_id);
        
        $is_recorded  = $this->job_model->record_application($applicant_id, $job_id, $id->company_id);
        
        if(!$is_recorded){
            echo json_encode(false);
        } else {
            echo json_encode(true);
        }
    }   

    /**
     * client/show
     * Loads the Profile Informations of the Client
     */
    public function show(){
        $data['title']    = 'My Profile';
        $data['location'] = 'client/show';
        $data['script']   = base_url('assets/build/js/client.js');

        $data['specialization']     = $this->specialization_model->get_all();
        $data['sub_specialization'] = $this->specialization_model->get_all_sub();
        $data['fos']                = $this->specialization_model->get_all_fos();
        $data['eas']                = $this->specialization_model->get_all_eas();

        $data['locations']          = $this->location_model->get_all();
        $data['salaries']           = $this->salary_model->get_all();

        $data['client']         = $this->client_model->get($this->temp_id);
        $raw_qualifications     =  $this->client_model->get_applicant_qualifications($data['client']->aq_id);
        $data['qualifications'] = $this->map_qualifications($raw_qualifications);

        $this->load->view('layouts/backend/client/home', $data);
    }

    /**
     * Add Qualification
     */
    public function add_qualification(){

        // var_dump($_POST); exit;

        $aq_id            = strtoupper(random_string('alnum', 10)); 
        $qualifications   = $this->input->post('qualifications');
        $q_list           = $this->organize_qualifications($qualifications);

        $is_recorded  = $this->client_model->record_qualification_id($this->temp_id, $aq_id);

        if($is_recorded){
            $is_aq_recorded = $this->client_model->add_employee_qualifications($aq_id, $q_list);
            echo ($is_aq_recorded === true) ? json_encode(true) : json_encode(false);

        } else {
            echo json_encode(false);
        }
    }

    //TODO: Update Logic
    public function update_qualifications(){
      
        $aq_id          = $this->input->post('aq_id');         
        $qualifications = $this->input->post('qualifications');
        $q_ids          = $this->client_model->get_q_ids($aq_id);
        $q_list         = $this->organize_qualifications($qualifications);
  
        $is_update      = $this->client_model->update_qualifications($aq_id, $q_list,$q_ids);

        if($is_update){
            echo json_encode(true);
        } else {
            echo json_encode(false);
        }
    }

    private function organize_qualifications($qualifications){
        $q_list = [];
        
        foreach ($qualifications as $item => $value) {
            $q_list[$item] = $value;
        }

        return $q_list;
    }


    public function map_qualifications($qualification){
    
        $mapped_data = [];

        foreach ($qualification as $key) {

            if($key->description == 'Specialization'){
                
                $description = $this->client_model->get_qualification_description($key->qualification_id, 1)->description;

                $mapped_data['spec'] = array(
                    'id'               => $key->id,
                    'aq_id'            => $key->aq_id,
                    'qualification_id' => $key->qualification_id,
                    'description'      => $description
                );

            } else if($key->description == 'Field of Study'){

                $description = $this->client_model->get_qualification_description($key->qualification_id, 2)->description;

                $mapped_data['fos'] = array(
                    'id'               => $key->id,
                    'aq_id'            => $key->aq_id,
                    'qualification_id' => $key->qualification_id,
                    'description'      => $description
                );

            } else if($key->description == 'Degree Level'){

                $description = $this->client_model->get_qualification_description($key->qualification_id, 3)->description;

                $mapped_data['educ'] = array(
                    'id'               => $key->id,
                    'aq_id'            => $key->aq_id,
                    'qualification_id' => $key->qualification_id,
                    'description'      => $description
                );
            }
        }
        return $mapped_data;
    }

    /**
     * Method that records information of the client
     */
    public function record(){

        $id = "91NR4POSTE";
        $aq_id = "S4LV4T0R3S";
        $first_name   = $this->input->post('first_name');
        $last_name    = $this->input->post('last_name');
        $middle_name  = $this->input->post('middle_name');
        $address      = $this->input->post('address');
        $contact      = $this->input->post('contact_number');
        $prim_educ    = $this->input->post('prim_educ');
        $sec_educ     = $this->input->post('sec_educ');
        $ter_educ     = $this->input->post('ter_educ');
        $course       = $this->input->post('course');
        $email        = $this->input->post('email');

        $is_added = $this->client_model->add_profile_data($id, $aq_id, $first_name, $last_name, $middle_name,
        $address, $contact, $email, $prim_educ, $sec_educ, $ter_educ, $course);

        if(!$is_added){
            echo json_encode(false);
        } else {
            echo json_encode(true);
        }
    }

    /**
     * Mehtod that update clients personal information section
     */
    public function update_personal_info(){
        $client_id      = $this->input->post('client_id');
        $first_name     = $this->input->post('first_name');
        $last_name      = $this->input->post('last_name');
        $middle_name    = $this->input->post('middle_name');
        $address        = $this->input->post('address');
        $contact_number = $this->input->post('contact_number');
        $email          = $this->input->post('email');

        $is_updated = $this->client_model->update_basic_information($client_id, $first_name, $last_name, $middle_name,
        $address, $contact_number, $email);

        if(!$is_updated){
            echo json_encode(false);
        } else {
            echo json_encode(true);
        }
    }

    /**
     * Method that update clients Eaducational Attainment Section
     */
    public function update_ea(){
        $client_id = $this->input->post('client_id');
        $prim_educ = $this->input->post('prim_educ');
        $sec_educ  = $this->input->post('sec_educ');
        $ter_educ  = $this->input->post('ter_educ');
        $course    = $this->input->post('course');

        $is_updated = $this->client_model->update_educational_attainment($client_id, $prim_educ, $sec_educ, $ter_educ, $course);

        if(!$is_updated){
            echo json_encode(false);
        } else {
            echo json_encode(true);
        }
    }

    /**
     * Shows a list of jobs applied by the client
     */
    public function applications(){
        $data['title']    = 'My Application';
        $data['script']   = base_url('assets/build/js/client.js');
        $data['location'] = 'client/applications';
        $data['jobs']     = $this->job_model->get_applied_job($this->temp_id);

        $this->load->view('layouts/backend/client/home', $data);
    }
    
    public function organize_qualification_by_job_id($job_qualifications){

        $jobs = array();
        $counter = 0;
        $base_id = '';
        $job_ids = [];
        $iterator = 0;

        foreach($job_qualifications as $jq){
            if($counter === 0){
                $job_ids[$jq->jq_id] = [];
            } else if (!array_key_exists($jq->jq_id, $jobs)){
                $job_ids[$jq->jq_id] = [];
            }
        }

        foreach ($job_qualifications as $jq) {
           
            if($iterator === 0){

                $base_id = $jq->jq_id;
                if(array_key_exists($base_id, $job_ids)){
                    $job_ids[$base_id][$jq->description] = $jq->qualification_id;
                }
                $iterator++;
            } else {
                
                if($base_id !== $jq->jq_id){
                    $job_ids[$jq->jq_id][$jq->description] = $jq->qualification_id;
                    $iterator = 0;
                } else {
                    $job_ids[$base_id][$jq->description] = $jq->qualification_id;
                }
            }
        }
        return $job_ids;
    }

    //Filtering jobs based on criteria.
    public function filter_job($job_qualifications, $client_qualification){

        $qualification_count_per_job = $this->count_qualification($job_qualifications);
        
        $index        = 0;
        $job_ids      = [];
        $job_match    = [];
        $jobs_details = [];

        foreach ($job_qualifications as $jq => $data) {
            $counter   = 0;
            for ($i = 0; $i < count($data); $i++) { 
                for ($j = 0; $j  < count($client_qualification); $j++) { 
                    if($this->has_qualification($data[array_keys($data)[$i]], array_keys($data)[$i], $client_qualification[$j]->qualification_id, $client_qualification[$j]->description)){
                        $counter++;
                    }
                } 
            }
            
            $count = $qualification_count_per_job[$jq][$index];
            
            if(($counter / $count) * 100 > 50){
                if($this->check_application($this->temp_id, $jq)){
                    $job_match[] = $jq;
                }
            } 
        }

        if(count($job_match) > 0) {
            for ($i=0; $i < count($job_match); $i++) { 
                $jobs_details[] = $this->job_model->get_job_details($job_match[$i]);
            }
        } 
    
        return $jobs_details;
    }

    private function check_application($appicant_id, $qualification_id){

        $job_id             = $this->job_model->get_job_id($qualification_id);
        $is_already_applied = $this->job_model->is_application_exist($appicant_id, $job_id->id);

        return ($is_already_applied) ? false : true;
    }

    private function count_qualification($jobs){
        $no_of_q_per_job = array();

        foreach ($jobs as $j => $value) {
            $no_of_q_per_job[$j][] = count($value);
        }

        return $no_of_q_per_job;
    }

    private function has_qualification($qualification, $q_type, $client_qualification, $cq_type){
        
        if($q_type === $cq_type){
            if($q_type === 'Degree Level'){
                return ($client_qualification >= $qualification) ? true : false;
            } else if ($qualification === $client_qualification){
                return true;
            }
        }

        return false;

        // if($q_type === $cq_type && $qualification === $client_qualification){
        //     if($q_type === 'Degree Level'){
        //         return ($client_qualification >= $qualification) ? true : false;
        //     } 
        //     return true;
        // }
        // return false;
    }

    private function company_qualification_count(){
        $count = $this->job_model->get_company_job_listings_qualifications(true);
        return $count;
    }
}

?>